// <auto-generated />
using System;
using DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataProvider.Migrations
{
    [DbContext(typeof(VendingDbContext))]
    partial class VendingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataProvider.Entities.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CatalogBrands");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Transaction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("Transaction");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinRecieved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CoinRecieveds");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinReturned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CoinReturneds");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CoinTypes");
                });

            modelBuilder.Entity("DataProvider.Entities.ErrorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ErrorDetails");
                });

            modelBuilder.Entity("DataProvider.Entities.TransactionPurshared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountPurshared")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<double>("OverDraft")
                        .HasColumnType("float");

                    b.Property<double>("Withdrawal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.ToTable("TransactionPurshared");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogItem", b =>
                {
                    b.HasOne("DataProvider.Entities.CatalogBrand", "CatalogBrand")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", "TransactionPurshared")
                        .WithMany("CatalogItems")
                        .HasForeignKey("Transaction");

                    b.Navigation("CatalogBrand");

                    b.Navigation("TransactionPurshared");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinRecieved", b =>
                {
                    b.HasOne("DataProvider.Entities.CoinType", "CoinType")
                        .WithMany("CoinsRecieved")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", "TransactionPurshared")
                        .WithMany("CoinsRecieved")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinType");

                    b.Navigation("TransactionPurshared");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinReturned", b =>
                {
                    b.HasOne("DataProvider.Entities.CoinType", "CoinType")
                        .WithMany("CoinsReturned")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", "TransactionPurshared")
                        .WithMany("CoinsReturned")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinType");

                    b.Navigation("TransactionPurshared");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogBrand", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinType", b =>
                {
                    b.Navigation("CoinsRecieved");

                    b.Navigation("CoinsReturned");
                });

            modelBuilder.Entity("DataProvider.Entities.TransactionPurshared", b =>
                {
                    b.Navigation("CatalogItems");

                    b.Navigation("CoinsRecieved");

                    b.Navigation("CoinsReturned");
                });
#pragma warning restore 612, 618
        }
    }
}
