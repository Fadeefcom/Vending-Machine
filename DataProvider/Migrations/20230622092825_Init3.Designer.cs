// <auto-generated />
using System;
using DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataProvider.Migrations
{
    [DbContext(typeof(VendingDbContext))]
    [Migration("20230622092825_Init3")]
    partial class Init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogBrandTransactionPurshared", b =>
                {
                    b.Property<int>("CatalogBrandsId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionPursharedId")
                        .HasColumnType("int");

                    b.HasKey("CatalogBrandsId", "TransactionPursharedId");

                    b.HasIndex("TransactionPursharedId");

                    b.ToTable("CatalogBrandTransactionPurshared");
                });

            modelBuilder.Entity("CoinTypeTransactionPurshared", b =>
                {
                    b.Property<int>("CoinsRecievedId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionPursharedId")
                        .HasColumnType("int");

                    b.HasKey("CoinsRecievedId", "TransactionPursharedId");

                    b.HasIndex("TransactionPursharedId");

                    b.ToTable("CoinTypeTransactionPurshared");
                });

            modelBuilder.Entity("CoinTypeTransactionPurshared1", b =>
                {
                    b.Property<int>("CoinsReturnedId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionPurshared1Id")
                        .HasColumnType("int");

                    b.HasKey("CoinsReturnedId", "TransactionPurshared1Id");

                    b.HasIndex("TransactionPurshared1Id");

                    b.ToTable("CoinTypeTransactionPurshared1");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CatalogBrands");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("DataProvider.Entities.CoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CoinTypes");
                });

            modelBuilder.Entity("DataProvider.Entities.ErrorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ErrorDetails");
                });

            modelBuilder.Entity("DataProvider.Entities.TransactionPurshared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountPurshared")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<double>("OverDraft")
                        .HasColumnType("float");

                    b.Property<double>("Withdrawal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.ToTable("TransactionPurshared");
                });

            modelBuilder.Entity("CatalogBrandTransactionPurshared", b =>
                {
                    b.HasOne("DataProvider.Entities.CatalogBrand", null)
                        .WithMany()
                        .HasForeignKey("CatalogBrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", null)
                        .WithMany()
                        .HasForeignKey("TransactionPursharedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoinTypeTransactionPurshared", b =>
                {
                    b.HasOne("DataProvider.Entities.CoinType", null)
                        .WithMany()
                        .HasForeignKey("CoinsRecievedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", null)
                        .WithMany()
                        .HasForeignKey("TransactionPursharedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoinTypeTransactionPurshared1", b =>
                {
                    b.HasOne("DataProvider.Entities.CoinType", null)
                        .WithMany()
                        .HasForeignKey("CoinsReturnedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataProvider.Entities.TransactionPurshared", null)
                        .WithMany()
                        .HasForeignKey("TransactionPurshared1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogItem", b =>
                {
                    b.HasOne("DataProvider.Entities.CatalogBrand", "CatalogBrand")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");
                });

            modelBuilder.Entity("DataProvider.Entities.CatalogBrand", b =>
                {
                    b.Navigation("CatalogItems");
                });
#pragma warning restore 612, 618
        }
    }
}
